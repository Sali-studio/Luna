package storage

import (
	"encoding/json"
	"os"
	"sync"
)

// --- 各機能の設定をまとめる構造体 ---
type TicketConfig struct {
	PanelChannelID string `json:"panel_channel_id"`
	CategoryID     string `json:"category_id"`
	StaffRoleID    string `json:"staff_role_id"`
	Counter        int    `json:"counter"`
}

type LogConfig struct {
	ChannelID string `json:"channel_id"`
}

type TempVCConfig struct {
	LobbyID    string `json:"lobby_id"`
	CategoryID string `json:"category_id"`
}

type DashboardConfig struct {
    GuildID   string `json:"guild_id"`
	ChannelID string `json:"channel_id"`
	MessageID string `json:"message_id"`
}

// 1つのサーバーの全設定をまとめる構造体
type GuildConfig struct {
	Ticket    TicketConfig      `json:"ticket"`
	Log       LogConfig         `json:"log"`
	TempVC    TempVCConfig      `json:"temp_vc"`
	Dashboard DashboardConfig   `json:"dashboard"`
	// 今後、リアクションロールなどの設定もここに追加していく
}

// --- 設定をファイルに保存/読み込みするための構造体 ---
type ConfigStore struct {
	mu      sync.Mutex
	path    string
	Configs map[string]*GuildConfig // Key: GuildID
}

func NewConfigStore(path string) (*ConfigStore, error) {
	store := &ConfigStore{
		path:    path,
		Configs: make(map[string]*GuildConfig),
	}
	if err := store.load(); err != nil && !os.IsNotExist(err) {
		return nil, err
	}
	return store, nil
}

func (s *ConfigStore) load() error {
	s.mu.Lock()
	defer s.mu.Unlock()
	file, err := os.ReadFile(s.path)
	if err != nil {
		return err
	}
	return json.Unmarshal(file, &s.Configs)
}

func (s *ConfigStore) save() error {
	s.mu.Lock()
	defer s.mu.Unlock()
	data, err := json.MarshalIndent(s.Configs, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(s.path, data, 0644)
}

// GetGuildConfig はサーバーの設定を取得します。存在しない場合は新しいものを作成します。
func (s *ConfigStore) GetGuildConfig(guildID string) *GuildConfig {
	s.mu.Lock()
	defer s.mu.Unlock()
	
	config, ok := s.Configs[guildID]
	if !ok {
		config = &GuildConfig{}
		s.Configs[guildID] = config
	}
	return config
}

// SaveGuildConfig はサーバーの設定を保存します
func (s *ConfigStore) SaveGuildConfig(guildID string, config *GuildConfig) error {
	s.Configs[guildID] = config
	return s.save()
}